Vercelデプロイ問題の完全解決記録

  📋 概要

  長瀬サロンWebサイトのVercelデプロイが長期間失敗していた問題を完全解決した記録です。

  🔍 発見された問題点

  1. S3環境変数への完全依存

  問題: アプリケーションがAWS S3の環境変数に完全依存していた
  - AWS_ACCESS_KEY_ID
  - AWS_SECRET_ACCESS_KEY
  - AWS_S3_BUCKET_NAME

  症状:
  - ローカル環境では.env.localで動作
  - Vercelでは環境変数未設定でビルド時にクラッシュ

  根本原因: src/lib/s3-data-manager.tsでS3接続が必須になっていた

  2. React Hooks ESLint警告

  問題: 4つの管理画面編集ページでuseEffect依存関係エラー
  React Hook useEffect has a missing dependency: 'fetchMenu'.
  Either include it or remove the dependency array.

  対象ファイル:
  - src/app/admin/menu/[id]/edit/page.tsx
  - src/app/admin/news/[id]/edit/page.tsx
  - src/app/admin/styles/[id]/edit/page.tsx
  - src/app/admin/stylists/[id]/edit/page.tsx

  症状: ビルド時にESLint警告でデプロイ失敗

  3. 不適切なGit管理

  問題: .claude/settings.local.jsonが意図せずコミットされていた
  - .gitignoreで除外設定済みだが、既存追跡ファイルは自動除外されない

  4. Vercel設定の複雑さ

  問題: vercel.jsonに不要な設定が含まれていた
  {
    "buildCommand": "npm run build",
    "outputDirectory": ".next",
    "devCommand": "npm run dev",
    "installCommand": "npm install",
    "env": { "NODE_ENV": "production" },
    "build": { "env": { "NODE_ENV": "production" } }
  }

  🛠️ 実装した解決策

  1. ハイブリッド データマネージャーの実装

  解決策: S3環境変数の有無に応じて自動切り替え

  export class S3DataManager {
    private s3Client: S3Client | null
    private bucketName: string | null
    private useLocal: boolean

    constructor() {
      // 環境変数の存在チェック
      const hasS3Config = !!(
        process.env.AWS_ACCESS_KEY_ID &&
        process.env.AWS_SECRET_ACCESS_KEY &&
        process.env.AWS_S3_BUCKET_NAME
      )

      this.useLocal = !hasS3Config

      if (hasS3Config) {
        // S3クライアント初期化
        this.s3Client = new S3Client({...})
        this.bucketName = process.env.AWS_S3_BUCKET_NAME!
      } else {
        // ローカルファイル使用モード
        this.s3Client = null
        this.bucketName = null
        console.log('S3 configuration not found, using local files')
      }
    }

    async getJsonData<T>(filename: string): Promise<T> {
      if (this.useLocal) {
        return this.getLocalJsonData<T>(filename)
      }
      // S3からの取得 + フォールバック
    }
  }

  効果:
  - 環境変数設定時: S3使用
  - 環境変数未設定時: src/data/*.json使用
  - S3エラー時: 自動ローカルフォールバック

  2. React Hooks警告の修正

  解決策: useCallback + 依存関係配列の適切な設定

  // Before (問題のあるコード)
  useEffect(() => {
    fetchMenu()
  }, [router, params.id])

  const fetchMenu = async () => { /* ... */ }

  // After (修正後)
  const fetchMenu = useCallback(async () => {
    /* ... */
  }, [params.id, router])

  useEffect(() => {
    fetchMenu()
  }, [router, params.id, fetchMenu])

  修正内容:
  - useCallbackでfetch関数をメモ化
  - 依存関係配列に関数を追加
  - 関数定義をuseEffectより前に移動

  3. Git管理の最適化

  解決策: 不適切なファイルの削除
  git rm --cached .claude/settings.local.json

  効果: プライベート設定ファイルがデプロイに含まれない

  4. 設定ファイルの簡素化

  vercel.json:
  {
    "framework": "nextjs",
    "functions": {
      "src/app/api/**/*.ts": {
        "maxDuration": 10
      }
    }
  }

  package.json:
  {
    "engines": {
      "node": ">=18.17.0"
    }
  }

  📊 修正前後の比較

  | 項目       | 修正前  | 修正後       |
  |----------|------|-----------|
  | 環境変数依存   | S3必須 | 自動フォールバック |
  | ESLint警告 | 4件   | 0件        |
  | ビルド成功率   | 0%   | 100%      |
  | デプロイ成功   | ❌    | ✅         |
  | 開発体験     | 困難   | スムーズ      |

  🎯 学習ポイント

  1. 環境変数設計の重要性

  - 本番環境で必須の環境変数は慎重に設計
  - フォールバック機能で開発体験を向上
  - 環境差異を最小化

  2. React Hooksのベストプラクティス

  - useCallbackは依存関係と一緒に使用
  - ESLint警告は無視せず適切に修正
  - 関数定義の順序に注意

  3. Git管理の注意点

  - .gitignoreは既存追跡ファイルに影響しない
  - git rm --cachedで追跡停止
  - プライベート設定は最初から除外

  4. デプロイ設定の原則

  - 設定は最小限に
  - フレームワークのデフォルトを活用
  - 明示的なNode.jsバージョン指定

  🚀 成功要因

  1. 段階的なデバッグ: 問題を一つずつ特定・解決
  2. 根本原因の追求: 表面的な修正でなく設計から見直し
  3. フォールバック機能: 環境差異を吸収する仕組み
  4. 適切なツール使用: Serena MCPで効率的なコード修正

  📝 今後の予防策

  開発時

  - 環境変数チェッカーの実装
  - CI/CDでのESLint強制
  - デプロイ前ビルドテスト

  設定管理

  - 環境変数ドキュメント化
  - .gitignore テンプレート作成
  - デプロイ手順書の作成

  ---
  結論: 複数の小さな問題が重なって大きなデプロイ障害となっていた。環境変数依存の設計見直しが最も重要な解決策だった。






  Vercelデプロイ失敗の原因と解決方法 📝

  🤔 なぜデプロイできなかったのか？

  簡単に言うと...

  アプリがAWSの設定を要求していたが、Vercelにはその設定がなかった

  🔍 具体的な問題

  1. AWS S3への依存（一番の問題）

  何が起きていたか：
  ローカル環境 → .env.localにAWS設定あり → 動く ✅
  Vercel環境 → AWS設定なし → エラーでデプロイ失敗 ❌

  なぜこうなったか：
  - アプリはデータを保存するのにAWS S3を使う設計だった
  - でも実際はローカルのsrc/data/stylists.jsonなどを使っていた
  - コードは「AWS必須」と思い込んでいた

  2. コードの警告エラー

  何が起きていたか：
  // 問題のあったコード
  useEffect(() => {
    fetchMenu() // この関数が後で定義されている
  }, [router, params.id]) // でも依存関係に入ってない

  const fetchMenu = async () => { ... } // 後で定義

  なぜダメだったか：
  - React Hooksのルールに違反
  - ビルド時に警告が出てデプロイ失敗

  3. 不要なファイルが含まれていた

  何が起きていたか：
  - Claude（AI）の設定ファイルがGitにコミットされていた
  - これが余計な混乱を招いていた

  🛠️ どうやって直したか？

  1. 「S3がなくてもOK」の仕組みを作った

  修正前：
  // AWS必須のコード
  constructor() {
    this.s3Client = new S3Client({
      accessKeyId: process.env.AWS_ACCESS_KEY_ID!, // ←これがないとエラー
      secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY! // ←これも
    })
  }

  修正後：
  // AWS設定チェック → なければローカルファイル使用
  constructor() {
    const hasAWS = process.env.AWS_ACCESS_KEY_ID && process.env.AWS_SECRET_ACCESS_KEY

    if (hasAWS) {
      this.useS3 = true // AWS使う
    } else {
      this.useLocal = true // ローカルファイル使う
      console.log('AWSなし → ローカルファイル使用')
    }
  }

  2. React Hooksの警告を修正

  修正前：
  useEffect(() => {
    fetchMenu() // 警告：依存関係がない
  }, [router, params.id])

  const fetchMenu = async () => { ... } // 後で定義

  修正後：
  // 先に関数を定義
  const fetchMenu = useCallback(async () => {
    ... // 同じ処理
  }, [params.id, router]) // 依存関係を明記

  // その後でuseEffect
  useEffect(() => {
    fetchMenu()
  }, [router, params.id, fetchMenu]) // fetchMenuも依存関係に追加

  3. 不要ファイルを削除

  git rm --cached .claude/settings.local.json

  🎯 結果

  | 項目    | 修正前  | 修正後  |
  |-------|------|------|
  | デプロイ  | ❌ 失敗 | ✅ 成功 |
  | エラー   | 複数あり | なし   |
  | AWS依存 | 必須   | 不要   |

  🔧 実際の動作

  ローカル環境

  1. AWS設定あり？ → はい
  2. S3を使用 ✅

  Vercel環境

  1. AWS設定あり？ → いいえ
  2. ローカルJSONファイルを使用 ✅
  3. デプロイ成功！ 🎉

  💡 ポイント

  一番重要だったのは：
  環境に依存しない「フォールバック機能」を作ったこと

  つまり：
  - AWS設定があればS3使用
  - なければローカルファイル使用
  - どちらでも動く！

  これで「AWSアカウントがなくても誰でもデプロイできる」ようになりました。




  これからの開発
  mainブランチは本番デプロイようとして用いる
  開発はmainからdevelopブランチをきる。
  developでは開発、テストしてデプロイするところまで行う。developブランチのデプロイで動作に問題がなければmainにマージして本番適応する運用とする。


  続きの開発を行なってください。